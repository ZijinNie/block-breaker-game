namespace ca.mcgill.ecse223.block.model;
use Block223Persistence.ump;
use Block223PlayMode.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;
   before constructor{
	if ( aUsername==null|| aUsername.equals("")){
		throw new RuntimeException("username is null or empty");
		}
	}
	public static String findUsername(UserRole admin){
		List<User> users = admin.getBlock223().getUsers();
		for (User user:users){
			List<UserRole> roles = user.getRoles();
			for (UserRole role: roles){
				if (role == admin){
					return user.getUsername();
				}
			}
		}
		return "";
	}
}

class UserRole {
   abstract;
   password;
   before constructor{
   	if ( aPassword ==null || aPassword.equals("")){
   	 throw new RuntimeException("player password is null or empty");
   	}
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
   before constructor {
      if (aNrBlocksPerLevel <= 0) {
         throw new RuntimeException("The number of blocks per level must be greater than zero.");
      }
      if (aName == null) {
         throw new RuntimeException("The name of a game must be specified.");
      }
   }

   before setNrBlocksPerLevel {
      if (aNrBlocksPerLevel <= 0) {
         throw new RuntimeException("The number of blocks per level must be greater than zero.");
      }
   }
   before setName {
      if (aName == null) {
         throw new RuntimeException("The name of a game must be specified.");
      }
   }

   public Block findBlock(int id){

		List<Block> blocks = this.getBlocks();


		for(Block block:blocks) {
			if(block.getId() == id) {
				return block;
			}
		}
		return null;
	}
    public Block getRandomBlock(){
       List<Block> blocks = this.getBlocks();
       ArrayList<Block> blocksList= new ArrayList<Block>();
       for(Block block:blocks) {
    	        blocksList.add(block);
       }
       Random rn = new Random();
       int x= rn.nextInt(1000)%blocksList.size(); 
      return blocksList.get(x); 
 }
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000;
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;

   before constructor{
   		if (aRed>255 | aRed<0){
   			throw new RuntimeException("Red must be between 0 and 255.");
		}
		if (aBlue>255 | aBlue<0){
   			throw new RuntimeException("Blue must be between 0 and 255.");
		}
		if (aGreen>255 | aGreen<0){
   			throw new RuntimeException("Green must be between 0 and 255.");
		}
		if (aPoints<1 | aPoints>1000){
   			throw new RuntimeException("Points must be between 1 and 1000.");
		}
   }

   before setRed{
   		if (aRed>255 | aRed<0){
   			throw new RuntimeException("Red must be between 0 and 255.");
		}
   }
   before setGreen{
   		if (aGreen>255 | aGreen<0){
   			throw new RuntimeException("Green must be between 0 and 255.");
		}
   }
   before setBlue{
   		if (aBlue>255 | aBlue<0){
   			throw new RuntimeException("Blue must be between 0 and 255.");
		}
   }
   before setPoints{
   		if (aPoints<1 | aPoints>1000){
   			throw new RuntimeException("Points must be between 1 and 1000.");
		}
   }
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
	public BlockAssignment findBlockAssignment(int gridHorizontalPosition, int gridVerticalPosition){
	  List<BlockAssignment> assignments = this.getBlockAssignments();
	  for(BlockAssignment assignment:assignments) {
		  int h = assignment.getGridHorizontalPosition();
		  int v = assignment.getGridVerticalPosition();
			if(h==gridHorizontalPosition&&v==gridVerticalPosition) {
				return assignment;
			}
		}
	  return null;
  }
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
   Integer maxNumberOfHorizontalBlocks = calculateMaxNumberOfHorizontalBlocks();
   Integer maxNumberOfVerticalBlocks = calculateMaxNumberOfVerticalBlocks();
     after constructor{

		if (aGridHorizontalPosition < 1 | aGridHorizontalPosition>maxNumberOfHorizontalBlocks){
   			throw new RuntimeException("The horizontal position must be between 1 and " + maxNumberOfHorizontalBlocks + ".");
		}
		if (aGridVerticalPosition < 1 | aGridVerticalPosition>maxNumberOfVerticalBlocks){
   			throw new RuntimeException("The vertical position must be between 1 and " + maxNumberOfVerticalBlocks + ".");
		}
   }
   before setGridHorizontalPosition{
   		if (aGridHorizontalPosition < 1 | aGridHorizontalPosition>maxNumberOfHorizontalBlocks){
   			throw new RuntimeException("The horizontal position must be between 1 and " + maxNumberOfHorizontalBlocks + ".");
		}
   }
   before setGridVerticalPosition{
   		if (aGridVerticalPosition < 1 | aGridVerticalPosition>maxNumberOfVerticalBlocks){
   			throw new RuntimeException("The vertical position must be between 1 and " + maxNumberOfVerticalBlocks + ".");
		}
   }
   public static int calculateMaxNumberOfHorizontalBlocks() {
  	return (int)((Game.PLAY_AREA_SIDE - 2*Game.WALL_PADDING + Game.COLUMNS_PADDING)/
        (Game.COLUMNS_PADDING + Block.SIZE));
	}
   public static int calculateMaxNumberOfVerticalBlocks() {
  	return (int)((Game.PLAY_AREA_SIDE - Game.WALL_PADDING - Paddle.VERTICAL_DISTANCE - Ball.BALL_DIAMETER + Game.ROW_PADDING)/
        (Block.SIZE + Game.ROW_PADDING));
	}
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
   before constructor {
      if (aMinBallSpeedX < 0) {
         throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
      }
      if (aMinBallSpeedY < 0) {
         throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
      }
      if (aBallSpeedIncreaseFactor <= 0) {
         throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
      }
      if (aMinBallSpeedX == 0 && aMinBallSpeedY == 0) {
		 throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
	  }
   }

   before setMinBallSpeedX {
      if (aMinBallSpeedX < 0) {
         throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
      }
   }
   before setMinBallSpeedY {
      if (aMinBallSpeedY < 0) {
         throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
      }
   }
   before setBallSpeedIncreaseFactor {
      if (aBallSpeedIncreaseFactor <= 0) {
         throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
      }
   }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;

   before constructor {
      if (aMaxPaddleLength <= 0 || maxPaddleLength > 390) {
         throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
      }
      if (aMinPaddleLength <= 0) {
         throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
      }
   }

   before setMaxPaddleLength {
      if (aMaxPaddleLength <= 0 || maxPaddleLength > 390) {
         throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
      }
   }
   before setMinPaddleLength {
      if (aMinPaddleLength <= 0) {
         throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
      }
   }
}
